import org.gradle.work.InputChanges

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.bytedance.rhea-trace'
android {

    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools

    defaultConfig {
        applicationId "rhea.sample.android"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        ndk {
            abiFilters "arm64-v8a", "armeabi-v7a"
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

rheaTrace {

    compilation {
        traceWithMethodID = false
        traceFilterFilePath = "${project.rootDir}/rhea-trace/traceFilter.txt"
        applyMethodMappingFilePath = ""
    }

    runtime {
        mainThreadOnly false
        startWhenAppLaunch true
        atraceBufferSize "500000"
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.2'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.2'
    implementation project(':rhea-core')
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}

//project.task("preMinifyTask") {
//    doFirst {
//        inputs.files.each { f ->
//            println 'preMinifyTask file ' + f
//        }
//        println 'preMinifyTask preMinifyTask'
//    }
//}



def testTraceTaskProvider = project.tasks.register("TestTraceTask" ) { task ->
    doFirst {
        task.inputs.any { input ->
            input.files.files.any { file ->
                println 'TestTraceTask file ' + file

            }
        }
        println 'TestTraceTask TestTraceTask'
    }
}

project.afterEvaluate {
    project.android.applicationVariants.all { variant ->
        println("variant variant  " + variant.mappingFile + "  " + variant.buildType)

        def minifyTask = "minify${variant.name.capitalize()}WithProguard"
        try {
            def taskPrivder = project.tasks.named(minifyTask)
            testTraceTaskProvider.configure { it.dependsOn(taskPrivder) }
        } catch (Throwable e) {
            e.printStackTrace()
        }

        def dexBuilderTaskName = "dexBuilder${variant.name.capitalize()}"

        try {
            def dexBuilderProvider = project.tasks.named(dexBuilderTaskName)
            dexBuilderProvider.configure { task ->
                println "dexBuilderProvider.configure " + task.mixedScopeClasses.files

                //task.mixedScopeClasses.files

                Task pmt = testTraceTaskProvider.get()
                task.dependsOn(pmt)

                task.doFirst {
                    println "dexBuilderProvider.configure " + task.mixedScopeClasses.files
                }

            }
        } catch (Throwable ignore) {
        }

    }
}

project.afterEvaluate {
    def taskPrivder = project.tasks.named("stripReleaseDebugSymbols")
    println("taskPrivder  $taskPrivder")
}